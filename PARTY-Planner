#include<iostream>
#include <bits/stdc++.h>
using namespace std;

int max(int a, int b) { return (a > b)? a : b; }
 
// Returns the maximum value that can be put in a knapsack of capacity W
void knapSack(int W, int wt[], int val[], int n)
{
   int i, w;
   int K[n+1][W+1];
 
   // Build table K[][] in bottom up manner
   for (i = 0; i <= n; i++)
   {
       for (w = 0; w <= W; w++)
       {
           if (i*w==0)
               K[i][w] = 0;
           else if (wt[i-1] <= w)
                 K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]],  K[i-1][w]);
           else
                 K[i][w] = K[i-1][w];
       }
   }
 int maxfun = K[n][W];
 int j;
 for (j = W; j>=0; j--)
   	if (maxfun>K[n][j])
     break;
     
 int costspent = ++j;
 cout<<costspent<<" "<<maxfun<<"\n";
}

int main(){

ios_base::sync_with_stdio(false);
cin.tie(NULL);

while (1)
{
    int parties, budget;
    cin>>budget>>parties;
    if (parties==0&&budget==0)
    break;
    
    int cost[parties], fun[parties];
    
    for (int i=0; i<parties; i++)
    cin>>cost[i]>>fun[i];
    
    knapSack(budget, cost, fun,parties);
    
}

return 0;
}
    
    
    
    
